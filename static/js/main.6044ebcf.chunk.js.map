{"version":3,"sources":["api.js","store.js","components/UsersList.js","components/Modal.js","components/AddNewPost.js","components/UserPostsList.js","components/Comments.js","components/EditPost.js","components/DeletePost.js","components/PostPageButtonContainer.js","components/PostPage.js","App.js","serviceWorker.js","index.js"],"names":["url","getUsers","a","fetch","usersFetched","json","users","getPosts","userId","postsFetched","posts","getComments","postId","commentsFetched","comments","setPosts","type","store","createStore","state","action","currentUserId","connect","dispatch","setcurrentUserId","value","className","length","map","user","key","id","name","email","website","to","onClick","Modal","isOpen","setIsOpen","children","AddNewPost","useState","newPostTitle","setNewPostTitle","newPostBody","setNewPostBody","submited","setSubmited","onSubmit","event","preventDefault","data","body","Date","getTime","title","method","headers","JSON","stringify","then","res","response","console","log","catch","error","onChange","target","placeholder","required","rows","todoActions","addTodo","useEffect","find","post","Comments","comment","EditPost","defaultProps","DeletePost","PostPageButtonContainer","isEditOpen","setEditIsOpen","isDeleteOpen","setIsDeleteOpen","setComments","match","params","setUsers","path","exact","component","UsersList","UserPostsList","render","Boolean","window","location","hostname","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.6044ebcf.chunk.js","sourcesContent":["const url = 'https://jsonplaceholder.typicode.com';\n\nexport const getUsers = async () => {\n  const usersFetched = await fetch(`${url}/users`);\n  const users = await usersFetched.json();\n\n  return users;\n}\n\nexport const getPosts = async (userId) => {\n  const postsFetched = await fetch(`${url}/posts?userId=${userId}`);\n  const posts = await postsFetched.json();\n\n  return posts;\n}\n\nexport const getComments = async (postId) => {\n  const commentsFetched = await fetch(`${url}/comments?postId=${postId}`);\n  const comments = await commentsFetched.json();\n\n  return comments;\n}","import { createStore } from 'redux';\n\nconst SET_USERS = 'SET_USERS';\nconst SET_POSTS = 'SET_POSTS';\nconst SET_CURRENT_USER = 'SET_CURRENT_USER';\nconst SET_COMMENTS = 'SET_COMMENTS';\n\nconst ADD_TODO = 'ADD_TODO';\nconst TOGGLE_TODO = 'TOGGLE_TODO';\nconst DELETE_TODO = 'DELETE_TODO';\n\n\nexport const setUsers = users => ({ type: SET_USERS, users });\nexport const setPosts = posts => ({ type: SET_POSTS, posts });\nexport const setComments = comments => ({ type: SET_COMMENTS, comments });\nexport const setcurrentUserId = userId => ({ type: SET_CURRENT_USER, userId });\n\nexport const addTodo = title => ({ type: ADD_TODO, title });\nexport const toggleTodo = todoId => ({ type: TOGGLE_TODO, todoId });\nexport const deleteTodo = todoId => ({ type: DELETE_TODO, todoId });\n\nconst initialState = {\n  users: [],\n  posts: [],\n  comments: [],\n  currentUserId: 1,\n};\n\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case SET_USERS:\n      return { ...state, users: action.users };\n\n    case SET_POSTS:\n      return { ...state, posts: action.posts };\n\n    case SET_COMMENTS:\n      return { ...state, comments: action.comments };\n\n    case SET_CURRENT_USER:\n      return { ...state, currentUserId: action.userId };\n\n    default: return state;\n  }\n};\n\nconst store = createStore(reducer, initialState);\n\nexport default store;","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\n\nimport './UsersList.css';\nimport * as todoActions from '../store';\n\nconst UsersList = ({ users, setcurrentUserId }) => {\n  const handleUser = (userId) => {\n    setcurrentUserId(userId)\n  }\n\n  return (\n    <div className=\"UsersList\">\n      <h2>Page \"Users\"</h2>\n      <p>(users quantyty: {users.length})</p>\n\n      <ul className=\"UsersList__list\">\n        {users.map(user =>\n          <li key={user.id} className=\"UsersList__list-item\">\n            <h3 className=\"UsersList__header\">{user.name}</h3>\n            <ul className=\"UsersList__contacts-list\">\n              <li className=\"UsersList__contacts-item additional-text\">{user.email}</li>\n              <li className=\"UsersList__contacts-item additional-text\">{user.website}</li>\n            </ul>\n            <Link\n              to=\"/user_posts\"\n              onClick={() => handleUser(user.id)}\n              className=\"button\"\n            >\n               Posts\n            </Link>\n          </li>\n        )}\n      </ul>\n    </div>\n)}\n\nconst mapStateToProps = state => ({\n  users: state.users,\n});\n\nconst mapDispatchToProps = dispatch => ({\n  setcurrentUserId: value => dispatch(todoActions.setcurrentUserId(value)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(UsersList);\n\nUsersList.propTypes = {\n  users: PropTypes.arrayOf(PropTypes.object).isRequired,\n  setcurrentUserId: PropTypes.func.isRequired,\n}","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './Modal.css';\n\nconst Modal = ({ isOpen, setIsOpen, children }) => {\n  return (\n    <>\n    {isOpen && \n    <div className=\"modal\">\n      <div className=\"modal__contaiter\">\n        {children}\n        <button\n          onClick={() => setIsOpen(!isOpen)}\n          className=\"button button--close\"\n        >\n          <span className=\"visually-hidden\">Close</span>\n        </button>\n      </div>\n    </div>}\n    </>\n)}\n\nexport default Modal;\n\nModal.propTypes = {\n  isOpen: PropTypes.bool.isRequired,\n  setIsOpen: PropTypes.func.isRequired,\n  children: PropTypes.object.isRequired,\n}","import React, { useState } from 'react';\nimport { getPosts } from '../api';\nimport PropTypes from 'prop-types';\n\nconst AddNewPost = ({ currentUserId, setPosts }) => {\n  const [newPostTitle, setNewPostTitle] = useState('');\n  const [newPostBody, setNewPostBody] = useState('');\n  const [submited, setSubmited] = useState(false);\n\n  const handleNewTitleChange = (event) => {\n    setNewPostTitle(event.target.value);\n  };\n\n  const handleNewPostBodyChange = (event) => {\n    setNewPostBody(event.target.value);\n  };\n\n  const handleSubmited = () => {\n    setSubmited(false)\n  }\n\n  const handleSubmit = (event) => {\n    event.preventDefault();\n\n    if (newPostBody && newPostTitle) {\n      const url = 'https://jsonplaceholder.typicode.com/posts';\n\n      const data = {\n        body: newPostBody,\n        id: (new Date()).getTime(),\n        title: newPostTitle,\n        userId: currentUserId,\n      };\n\n      fetch(url, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(data),\n      })\n        .then((res) => res.json())\n        .then((response) => console.log('Success:', response))\n        .then(() => getPosts(currentUserId).then(setPosts))\n        .catch((error) => console.error('Error:', error));\n  \n      setNewPostTitle('');\n      setNewPostBody('');\n      setSubmited(true);\n    }\n  }\n\n  return (\n    <form onSubmit={handleSubmit}>\n      {!submited &&\n        <>\n          <h2>Add New Post</h2>\n          \n          <div className=\"form__container\">\n            <label className=\"form__label\">\n              <p className=\"form__label-text\">Post title:</p>\n\n              <input\n                type=\"text\"\n                value={newPostTitle}\n                onChange={handleNewTitleChange}\n                placeholder=\"Post title\"\n                className=\"form__input\"\n                required\n              />\n            </label>\n\n            <label className=\"form__label\">\n              <p className=\"form__label-text\">Post body:</p>\n\n              <textarea\n                type=\"text\"\n                rows=\"8\"\n                value={newPostBody}\n                onChange={handleNewPostBodyChange}\n                placeholder=\"Post body\"\n                className=\"form__input\"\n                required\n              />\n            </label>\n          </div>\n\n          <button type=\"submit\" className=\"button button--form\">\n            Add New Post\n          </button>\n        </>\n      }\n\n      {submited &&\n        <div>\n          <h2>Success!</h2>\n          <p>Your Post was successfully created!</p>\n\n          <button\n            type=\"submit\"\n            className=\"button button--form\"\n            onClick={handleSubmited}\n          >\n            Add another one\n          </button>\n        </div>\n      }\n    </form>\n)}\n\nexport default AddNewPost;\n\nAddNewPost.propTypes = {\n  setPosts: PropTypes.func.isRequired,\n  currentUserId: PropTypes.number.isRequired,\n}\n","import React, { useEffect, useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\n\nimport './UserPostsList.css';\nimport { getPosts } from '../api';\nimport * as todoActions from '../store';\n\nimport Modal from './Modal';\nimport AddNewPost from './AddNewPost';\n\nconst UserPostsList = ({ currentUserId, setPosts, posts, users }) => {\n  const [isOpen, setIsOpen] = useState(false);\n\n  useEffect(() => {\n    getPosts(currentUserId)\n      .then(setPosts);\n  }, [setPosts, currentUserId]);\n\n  return (\n    <div className=\"UserPostsList\">\n      <h2>\n        Posts of {(users.find(user => user.id === currentUserId) || {}).name}\n      </h2>\n\n      <p>Posts quantity: {posts.length} </p>\n\n      <ul className=\"UserPostsList__list\">\n        {posts.map(post =>\n          <li\n            key={post.id}\n            className=\"UserPostsList__list-item\"\n          >\n            <div>\n              <h3 className=\"UserPostsList__post-title\">{post.title}</h3>\n              <p className=\"UserPostsList__post-body\">{post.body}</p>\n            </div>\n\n            <Link to={`/user_posts/${post.id}`} className=\"button\">\n              Details\n            </Link>\n          </li>\n        )}\n      </ul>\n\n      <div className=\"UserPostsList__button-container\">\n        <Link to=\"/\" className=\"button\">Back to Users List</Link>\n\n        <button\n          onClick={() => setIsOpen(!isOpen)}\n          className=\"button button--add-new\"\n        >\n          Add New\n        </button>\n      </div>\n\n      <Modal\n        isOpen={isOpen}\n        setIsOpen={setIsOpen}\n      >\n        <AddNewPost\n          currentUserId={currentUserId}\n          setPosts={setPosts}\n        />\n      </Modal>\n    </div>\n)}\n\nconst mapStateToProps = state => ({\n  users: state.users,\n  posts: state.posts,\n  currentUserId: state.currentUserId,\n});\n\nconst mapDispatchToProps = dispatch => ({\n  setPosts: posts => dispatch(todoActions.setPosts(posts)),\n  addTodo: value => dispatch(todoActions.addTodo(value)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(UserPostsList);\n\nUserPostsList.propTypes = {\n  users: PropTypes.arrayOf(PropTypes.object).isRequired,\n  posts: PropTypes.arrayOf(PropTypes.object).isRequired,\n  setPosts: PropTypes.func.isRequired,\n  currentUserId: PropTypes.number.isRequired,\n}","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './Comments.css';\n\nconst Comments = ({ comments }) => (\n  <section className=\"Comments\">\n    <div className=\"Comments__title-container\">\n      <h4>Post Comments</h4>\n      <p>{comments.length} comments</p>\n    </div>\n\n    <ul className=\"Comments__list\">\n      {comments.map(comment =>\n        <li key={comment.id} className=\"Comments__item\">\n          {comment.body}\n          <div className=\"Comments__comment-contacts\">\n            <p className=\"additional-text\">\n              Name:\n              <span className=\"additional-text--mark\">\n                {' '}{comment.name}\n              </span>\n            </p>\n            \n            <p className=\"additional-text\">\n              Email:\n              <span className=\"additional-text--mark\">\n                {' '}{comment.email}\n              </span>\n            </p>\n          </div>\n        </li>\n      )}\n    </ul>\n  </section>\n)\n\nexport default Comments;\n\nComments.propTypes = {\n  comments: PropTypes.arrayOf(PropTypes.object).isRequired,\n}\n","import React, { useState } from 'react';\nimport { getPosts } from '../api';\nimport PropTypes from 'prop-types';\n\nconst EditPost = ({ currentUserId, setPosts, post }) => {\n  const [newPostTitle, setNewPostTitle] = useState(post.title);\n  const [newPostBody, setNewPostBody] = useState(post.body);\n  const [submited, setSubmited] = useState(false);\n\n  const handleNewTitleChange = (event) => {\n    setNewPostTitle(event.target.value);\n  };\n\n  const handleNewPostBodyChange = (event) => {\n    setNewPostBody(event.target.value);\n  };\n\n  const handleSubmited = () => {\n    setSubmited(false)\n  }\n\n  const handleSubmit = (event) => {\n    event.preventDefault();\n\n    if (newPostBody && newPostTitle) {\n      const url = 'https://jsonplaceholder.typicode.com/posts/1';\n\n      const data = {\n        body: newPostBody,\n        id: (new Date()).getTime(),\n        title: newPostTitle,\n        userId: currentUserId,\n      };\n\n      fetch(url, {\n        method: 'PUT',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(data),\n      })\n        .then((res) => res.json())\n        .then((response) => console.log('Success:', response))\n        .then(() => getPosts(currentUserId).then(setPosts))\n        .catch((error) => console.error('Error:', error));\n\n      setSubmited(true);\n    }\n  }\n\n  return (\n    <form onSubmit={handleSubmit}>\n      {!submited &&\n        <>\n          <h2>Edit Post</h2>\n          \n          <div className=\"form__container\">\n            <label className=\"form__label\">\n              <p className=\"form__label-text\">Post title:</p>\n\n              <input\n                type=\"text\"\n                value={newPostTitle}\n                onChange={handleNewTitleChange}\n                placeholder=\"Post title\"\n                className=\"form__input\"\n                required\n              />\n            </label>\n\n            <label className=\"form__label\">\n              <p className=\"form__label-text\">Post body:</p>\n\n              <textarea\n                type=\"text\"\n                rows=\"8\"\n                value={newPostBody}\n                onChange={handleNewPostBodyChange}\n                placeholder=\"Post body\"\n                className=\"form__input\"\n                required\n              />\n            </label>\n          </div>\n\n          <button type=\"submit\" className=\"button button--form\">\n            Save Changes\n          </button>\n        </>\n      }\n\n      {submited &&\n        <div>\n          <h2>Success!</h2>\n          <p>Your Post was successfully changed!</p>\n\n          <button\n            type=\"submit\"\n            className=\"button button--form\"\n            onClick={handleSubmited}\n          >\n            One more change!\n          </button>\n        </div>\n      }\n    </form>\n)}\n\nexport default EditPost;\n\nEditPost.propTypes = {\n  setPosts: PropTypes.func.isRequired,\n  currentUserId: PropTypes.number.isRequired,\n  post: PropTypes.object.isRequired,\n}\n\nEditPost.defaultProps = {\n  post: {}\n};\n","import React, { useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport PropTypes from 'prop-types';\n\nimport { getPosts } from '../api';\n\nconst DeletePost = ({ currentUserId, setPosts, post }) => {\n  const [submited, setSubmited] = useState(false);\n\n  const handleSubmit = (event) => {\n    event.preventDefault();\n    const data = {id: `${post.id}`}\n\n    const url = 'https://jsonplaceholder.typicode.com/posts/1';\n\n    fetch(url, {\n      method: 'DELETE',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify(data),\n    })\n      .then((res) => res.json())\n      .then((response) => console.log('Success:', response))\n      .then(() => getPosts(currentUserId).then(setPosts))\n      .catch((error) => console.error('Error:', error));\n\n    setSubmited(true);\n  }\n\n  return (\n    <form onSubmit={handleSubmit}>\n      {!submited &&\n        <>\n          <h2>\n            Post will be lost,\n            <br />\n            like tears in the rain!\n          </h2>\n\n          <button type=\"submit\" className=\"button button--form\">\n            Delete post!\n          </button>\n        </>\n      }\n\n      {submited &&\n        <div>\n          <h2>Success!</h2>\n          <p>Post was successfully deleted!</p>\n          \n          <Link\n            to=\"/user_posts/\"\n            className=\"button button--form\"\n          >\n            Back to Users Posts\n          </Link>\n        </div>\n      }\n    </form>\n)}\n\nexport default DeletePost;\n\nDeletePost.propTypes = {\n  setPosts: PropTypes.func.isRequired,\n  currentUserId: PropTypes.number.isRequired,\n  post: PropTypes.object.isRequired,\n}\n\nDeletePost.defaultProps = {\n  post: {}\n};\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport PropTypes from 'prop-types';\n\nconst PostPageButtonContainer = ({ isEditOpen, setEditIsOpen, isDeleteOpen, setIsDeleteOpen }) => (\n  <div className=\"PostPage__button-container\">\n  <Link to=\"/user_posts/\" className=\"button\">Back to Users Posts</Link>\n  \n  <div\n    className=\"PostPage__button-container PostPage__button-container--modifier\"\n  >\n    <button\n      className=\"button button--post-modifier\"\n      onClick={() => setEditIsOpen(!isEditOpen)}\n    >\n      Edit\n    </button>\n    \n    <button\n      className=\"button button--post-modifier\"\n      onClick={() => setIsDeleteOpen(!isDeleteOpen)}\n    >\n      Delete\n    </button>\n  </div>\n</div>\n)\n\nexport default PostPageButtonContainer;\n\nPostPageButtonContainer.propTypes = {\n  isEditOpen: PropTypes.bool.isRequired,\n  setEditIsOpen: PropTypes.func.isRequired,\n  isDeleteOpen: PropTypes.bool.isRequired,\n  setIsDeleteOpen: PropTypes.func.isRequired,\n}\n","import React, { useEffect, useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\n\nimport './PostPage.css';\nimport { getPosts, getComments } from '../api';\nimport * as todoActions from '../store';\n\nimport Modal from './Modal';\nimport Comments from './Comments';\nimport EditPost from './EditPost';\nimport DeletePost from './DeletePost';\nimport PostPageButtonContainer from './PostPageButtonContainer';\n\nconst PostPage = ({\n  users, comments, currentUserId, posts, setPosts, setComments, match\n}) => {\n  const [isEditOpen, setEditIsOpen] = useState(false);\n  const [isDeleteOpen, setIsDeleteOpen] = useState(false);\n\n  useEffect(() => {\n    getPosts(currentUserId)\n      .then(setPosts);\n\n    getComments(match.params.postId)\n      .then(setComments);\n  }, [currentUserId, setPosts, match.params.postId, setComments]);\n\n  return (\n    <div className=\"PostPage\">\n      <h2>Post page</h2>\n      \n      <section className=\"PostPage__post\">\n        <h3 className=\"PostPage__post-title\">\n          {(posts.find(post => post.id === +match.params.postId) || {}).title}\n        </h3>\n\n        <p className=\"PostPage__post-body\">\n          {(posts.find(post => post.id === +match.params.postId) || {}).body}\n        </p>\n\n        <p className=\"additional-text\">\n          Author: \n          <Link\n            to=\"/user_posts/\"\n            className=\" additional-text additional-text--link\"\n          >\n            {' '}{(users.find(user => user.id === currentUserId) || {}).name}\n          </Link>\n        </p>\n\n        <Comments comments={comments}/>\n      </section>\n\n      <PostPageButtonContainer\n        isEditOpen={isEditOpen}\n        setEditIsOpen={setEditIsOpen}\n        isDeleteOpen={isDeleteOpen}\n        setIsDeleteOpen={setIsDeleteOpen}\n      />\n\n      <Modal\n        isOpen={isEditOpen}\n        setIsOpen={setEditIsOpen}\n      >\n        <EditPost\n          post={posts.find(post => post.id === +match.params.postId)}\n          currentUserId={currentUserId}\n          setPosts={setPosts}\n        />\n      </Modal>\n\n      <Modal\n        isOpen={isDeleteOpen}\n        setIsOpen={setIsDeleteOpen}\n      >\n        <DeletePost\n          post={posts.find(post => post.id === +match.params.postId)}\n          currentUserId={currentUserId}\n          setPosts={setPosts}\n        />\n      </Modal>\n    </div>\n)}\n\nconst mapStateToProps = state => ({\n  users: state.users,\n  posts: state.posts,\n  currentUserId: state.currentUserId,\n  comments: state.comments,\n});\n\nconst mapDispatchToProps = dispatch => ({\n  setPosts: posts => dispatch(todoActions.setPosts(posts)),\n  setComments: comments => dispatch(todoActions.setComments(comments)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(PostPage);\n\nPostPage.propTypes = {\n  users: PropTypes.arrayOf(PropTypes.object).isRequired,\n  posts: PropTypes.arrayOf(PropTypes.object).isRequired,\n  comments: PropTypes.arrayOf(PropTypes.object).isRequired,\n  setPosts: PropTypes.func.isRequired,\n  setComments: PropTypes.func.isRequired,\n  currentUserId: PropTypes.number.isRequired,\n  match: PropTypes.object.isRequired,\n}\n","import React, { useEffect } from 'react';\nimport { HashRouter , Route, Switch } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\n\nimport './App.css';\nimport './components/button.css';\nimport './components/form.css';\n\nimport { getUsers } from './api';\nimport * as todoActions from './store';\n\nimport UsersList from './components/UsersList';\nimport UserPostsList from './components/UserPostsList';\nimport PostPage from './components/PostPage';\n\nconst App = ({ setUsers }) => {\n  useEffect(() => {\n    getUsers()\n      .then(setUsers);\n  }, [setUsers]);\n\n  return (\n    <div className=\"App\">\n      <HashRouter>\n        <h1>Post Collection</h1>\n\n        <Switch>\n          <Route path=\"/\" exact component={UsersList}/>\n\n          <Route path=\"/user_posts\" exact component={UserPostsList} />\n\n          <Route path=\"/user_posts/:postId?\" render={({ match }) => (\n            <PostPage match={match} />\n          )}/>\n        </Switch>\n      </HashRouter>\n    </div>\n  );\n}\n\nconst mapStateToProps = state => ({\n  users: state.users,\n});\n\nconst mapDispatchToProps = dispatch => ({\n  setUsers: users => dispatch(todoActions.setUsers(users)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n\nApp.propTypes = {\n  setUsers: PropTypes.func.isRequired,\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './index.css';\nimport App from './App';\nimport store from './store';\n\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux';\n\nconst Root = () => (\n  <Provider store={store}>\n    <App />\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}